// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecuperatorCore;

#nullable disable

namespace RecuperatorCore.Migrations
{
    [DbContext(typeof(RecuperatorContext))]
    [Migration("20241123143043_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("RecuperatorLibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecuperatorLibrary.Models.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("RecuperatorLibrary.Models.VariantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Consump_Air")
                        .HasColumnType("REAL");

                    b.Property<double>("Consump_Product")
                        .HasColumnType("REAL");

                    b.Property<double>("Percent_CO2")
                        .HasColumnType("REAL");

                    b.Property<double>("Percent_H2O")
                        .HasColumnType("REAL");

                    b.Property<double>("Radius_Section")
                        .HasColumnType("REAL");

                    b.Property<double>("Temp_Air_Input")
                        .HasColumnType("REAL");

                    b.Property<double>("Temp_Air_Output")
                        .HasColumnType("REAL");

                    b.Property<double>("Temp_Product_Input")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantUsers");
                });

            modelBuilder.Entity("RecuperatorLibrary.Models.Variant", b =>
                {
                    b.HasOne("RecuperatorLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecuperatorLibrary.Models.VariantUser", b =>
                {
                    b.HasOne("RecuperatorLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecuperatorLibrary.Models.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Variant");
                });
#pragma warning restore 612, 618
        }
    }
}
